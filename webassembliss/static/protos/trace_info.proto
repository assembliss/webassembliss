syntax = "proto3";

// This file can be compiled with: protoc trace_info.proto --python_out=../../pyprotos
// That will generate the trace_info_pb2.py file that we can import in the python backend.

// Message to hold information about the assembling process.
message AssemblerInfo {
  bool status_ok = 1;
  repeated string error = 2;
}

// Message to hold information about the linking process.
message LinkerInfo {
  bool status_ok = 1;
  repeated string errors = 2;
}

// Message to hold information about the entire build process.
// It combines the assembler and linker information;
// For new features, if any new build information is required, it can be included here without having to modify ExecutionTrace.
message BuildInfo {
  AssemblerInfo as_info = 1;
  LinkerInfo ld_info = 2;
}

// Message to hold information about the line that was executed;
// It stores an index for the filename inside of ExecutionTrace.source_filenames, and the line number.
message LineInfo {
  int32 filename_index = 1;
  int32 linenum = 2;
}

// Message to hold information about a single instruction execution.
// It stores the differences in registers/memory/flags/output this instruction caused.
message TraceStep {
  LineInfo line_executed = 1;
  string stdout = 2;
  string stderr = 3;
  optional sint32 exit_code = 4;
  map<string, uint64> register_delta = 5;
  map<string, bool> flag_delta = 6;
  map<uint64, bytes> memory_delta = 7;
}

// Message to hold information about an entire emulation.
// It stores information about the architecture emulated and a list of TraceSteps.
message ExecutionTrace {
  string rootfs = 1;
  uint32 arch_num_bits = 2;
  repeated string source_filenames = 3;
  BuildInfo build = 4;
  string argv = 5;
  optional sint32 exit_code = 6;
  bool reached_max_steps = 7;
  repeated TraceStep steps = 8;
}
