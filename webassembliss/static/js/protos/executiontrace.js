// source: trace_info.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.ExecutionTrace');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.TraceStep');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExecutionTrace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ExecutionTrace.repeatedFields_, null);
};
goog.inherits(proto.ExecutionTrace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ExecutionTrace.displayName = 'proto.ExecutionTrace';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ExecutionTrace.repeatedFields_ = [2,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExecutionTrace.prototype.toObject = function(opt_includeInstance) {
  return proto.ExecutionTrace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExecutionTrace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecutionTrace.toObject = function(includeInstance, msg) {
  var f, obj = {
rootfs: jspb.Message.getFieldWithDefault(msg, 1, ""),
sourceFilenamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
assembledOk: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
linkedOk: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
argv: jspb.Message.getFieldWithDefault(msg, 5, ""),
exitCode: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
reachedMaxSteps: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
mappedMemoryMap: (f = msg.getMappedMemoryMap()) ? f.toObject(includeInstance, undefined) : [],
stepsList: jspb.Message.toObjectList(msg.getStepsList(),
    proto.TraceStep.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExecutionTrace}
 */
proto.ExecutionTrace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExecutionTrace;
  return proto.ExecutionTrace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExecutionTrace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExecutionTrace}
 */
proto.ExecutionTrace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootfs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSourceFilenames(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAssembledOk(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLinkedOk(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setArgv(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setExitCode(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReachedMaxSteps(value);
      break;
    case 8:
      var value = msg.getMappedMemoryMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readUint64, null, 0, 0);
         });
      break;
    case 9:
      var value = new proto.TraceStep;
      reader.readMessage(value,proto.TraceStep.deserializeBinaryFromReader);
      msg.addSteps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExecutionTrace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExecutionTrace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExecutionTrace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecutionTrace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootfs();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceFilenamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAssembledOk();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getLinkedOk();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getArgv();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = message.getReachedMaxSteps();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getMappedMemoryMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getStepsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.TraceStep.serializeBinaryToWriter
    );
  }
};


/**
 * optional string rootfs = 1;
 * @return {string}
 */
proto.ExecutionTrace.prototype.getRootfs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.setRootfs = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string source_filenames = 2;
 * @return {!Array<string>}
 */
proto.ExecutionTrace.prototype.getSourceFilenamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.setSourceFilenamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.addSourceFilenames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.clearSourceFilenamesList = function() {
  return this.setSourceFilenamesList([]);
};


/**
 * optional bool assembled_ok = 3;
 * @return {boolean}
 */
proto.ExecutionTrace.prototype.getAssembledOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.setAssembledOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool linked_ok = 4;
 * @return {boolean}
 */
proto.ExecutionTrace.prototype.getLinkedOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.setLinkedOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string argv = 5;
 * @return {string}
 */
proto.ExecutionTrace.prototype.getArgv = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.setArgv = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional sint32 exit_code = 6;
 * @return {number}
 */
proto.ExecutionTrace.prototype.getExitCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.setExitCode = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.clearExitCode = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExecutionTrace.prototype.hasExitCode = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool reached_max_steps = 7;
 * @return {boolean}
 */
proto.ExecutionTrace.prototype.getReachedMaxSteps = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.setReachedMaxSteps = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * map<uint64, uint64> mapped_memory = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.ExecutionTrace.prototype.getMappedMemoryMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.clearMappedMemoryMap = function() {
  this.getMappedMemoryMap().clear();
  return this;
};


/**
 * repeated TraceStep steps = 9;
 * @return {!Array<!proto.TraceStep>}
 */
proto.ExecutionTrace.prototype.getStepsList = function() {
  return /** @type{!Array<!proto.TraceStep>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TraceStep, 9));
};


/**
 * @param {!Array<!proto.TraceStep>} value
 * @return {!proto.ExecutionTrace} returns this
*/
proto.ExecutionTrace.prototype.setStepsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.TraceStep=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TraceStep}
 */
proto.ExecutionTrace.prototype.addSteps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.TraceStep, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ExecutionTrace} returns this
 */
proto.ExecutionTrace.prototype.clearStepsList = function() {
  return this.setStepsList([]);
};


