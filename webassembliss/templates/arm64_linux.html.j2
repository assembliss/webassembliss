<!DOCTYPE html>
<html>
<head>
<style>
    /* Style the button that is used to open and close the collapsible content */
    .collapsible {
        background-color: #eee;
        color: #444;
        cursor: pointer;
        padding: 18px;
        width: 400px;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
    }

    /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
    .active, .collapsible:hover {
        background-color: #ccc;
    }

    /* Style the collapsible content. Note: hidden by default */
    .collapsibleContent {
        padding: 2 10px;
        width: 600px;
        display: none;
        overflow: visible;
        background-color:rgb(255, 225, 225);
    } 

    td {
        padding-top: 5px;
        padding-bottom: 5px;
        padding-left: 10px;
        padding-right: 10px;
    }

    th {
        padding-top: 5px;
        padding-bottom: 5px;
    }

    table {
        border: 1px solid black;
        border-collapse: separate;
        border-spacing: 10px;
        border-radius: 20px;
    }
</style>
</head>
<body>
    <h1>WebAssembliss (arm64_linux)</h1>
    <input type="button" value="Run" onclick="runCode()" />
    <input type="button" value="Debug" onclick="notImplemented()" />
    <input type="button" value="Clear Results" onclick="clearOutput()" />
    <input type="button" value="Save" onclick='download_file("usrCode.S", getSource(), "text/plain")'  />
    <input type="button" value="Load" onclick="notImplemented()" />
    <div id="container" style="width:800px;height:600px;border:1px solid grey"></div>
    {{
        rocher_editor(
            "container",
            "python",
            source_code,
            readOnly=false,
	        theme="vs-dark",
            lineHeight=20,
            minimap={"enabled": False}
        )
    }}
    <br/>
    <table>
        <tr>
            <th>Run Status</th>
            <td>Done: <span id="runStatus">⭕</span></td>
            <td>Assembled: <span id="asStatus">⭕</span></td>
            <td>Linked: <span id="ldStatus">⭕</span></td>
            <td>Exited: <span id="execStatus">⭕</span></td>
        </tr>
    </table> 

    <h3>Input</h3>
    <textarea id="inputBox" name="inputBox" rows=5 cols=80 placeholder="type any input your code will use here"></textarea>

    <h3>Output</h3>
    <textarea id="outputBox" name="outputBox" readOnly=true rows=5 cols=80 placeholder="your output will appear here after your code finishes running..."></textarea>

    <br/>
    <br/>

    <button type="button" class="collapsible">Show/hide error information</button>
    <div class="collapsibleContent">
        <textarea id="errorBox" name="errorBox" readOnly=true rows=10 cols=75 placeholder="any errors will appear here after your code finishes running..."></textarea>
    </div> 
    
    <br/>
    <br/>

    <button type="button" class="collapsible">Show/hide all emulation information</button>
    <div class="collapsibleContent">
        <textarea id="emulationInfo" name="emulationInfo" readOnly=true rows=10 cols=75 placeholder="emulation info will appear here after your code finishes running..."></textarea>
       <input id="downloadButton" type="button" value="download as json" onclick='download_file("emulationInfo.json", getLastRunInfo(), "application/json")' disabled="true"/>
    </div>

    <h3>ARM64 Assembly Reference</h3>
    <ul>
        <li><a target="_blank" rel="noopener noreferrer" href="https://developer.arm.com/documentation/102374/latest/">Official Documentation</a></li>
        <li><a target="_blank" rel="noopener noreferrer" href="https://www.cs.swarthmore.edu/~kwebb/cs31/resources/ARM64_Cheat_Sheet.pdf">Swarthmore College's ARM64 (AArch64) Reference Sheet</a></li>
        <li><a target="_blank" rel="noopener noreferrer" href="https://courses.cs.washington.edu/courses/cse469/19wi/arm64.pdf">University of Washington's ARMv8 A64 Quick Reference</a></li>
    </ul>

    <h3>Missing elements</h3>
    <ul>
        <li>Register values</li>
        <li>Status flags values</li>
        <li>Memory values</li>
        <li>Debug menu (continue, step, stop, breakpoints)</li>
        <li>Editor tabs for multi-file</li>
        <li>Menus so the user can customize view (e.g., which registers show, dark vs light theme)</li>
    </ul>
    
    <!-- You can access to the editor instance via module rocher_editor followed by the container id -->
    <script>
        const WAITING_SYMBOL = "⭕";
        const OK_SYMBOL = "✅";
        const ERROR_SYMBOL = "❌";
        var lastRunInfo = null;

        if (lastRunInfo === null) {
            document.getElementById("downloadButton").disabled = true;
        }

        var coll = document.getElementsByClassName("collapsible");
        var i;
        for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function() {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.display === "block") {
                content.style.display = "none";
                } else {
                content.style.display = "block";
                }
            });
        }

        require(['rocher_editor_container'], function (editor) {
            var myBinding = editor.addCommand(monaco.KeyCode.F9, function () {
            	alert("F9 pressed!");
            });
        });

        function notImplemented() {
            alert("Not implemented yet...");
        }

        function clearOutput() {
            document.getElementById("runStatus").innerHTML = WAITING_SYMBOL;
            document.getElementById("asStatus").innerHTML = WAITING_SYMBOL;
            document.getElementById("ldStatus").innerHTML = WAITING_SYMBOL;
            document.getElementById("execStatus").innerHTML = WAITING_SYMBOL;
            document.getElementById("outputBox").value = "";
            document.getElementById("errorBox").value = "";
            document.getElementById("emulationInfo").value = "";
            lastRunInfo = null;
            document.getElementById("downloadButton").disabled = true;
        }

        function runCode() {
            require(['rocher_editor_container'], function (editor) {
                var source_code = editor.getValue();
                var user_input = document.getElementById("inputBox").value;
                clearOutput();
                document.getElementById("runStatus").innerHTML = "⏳";

                fetch('/arm64_linux/run/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({source_code: source_code, user_input: user_input}),
                }).then(response => response.json())
                .then(data => {                 
                    document.getElementById("runStatus").innerHTML = OK_SYMBOL;
                    document.getElementById("asStatus").innerHTML = data.as_ok ? OK_SYMBOL : ERROR_SYMBOL;
                    document.getElementById("ldStatus").innerHTML = data.ld_ok ? OK_SYMBOL : ERROR_SYMBOL;
                    document.getElementById("execStatus").innerHTML = data.ran_ok ? OK_SYMBOL : ERROR_SYMBOL;
                    document.getElementById("outputBox").value = data.stdout;
                    document.getElementById("errorBox").value = data.stderr;
                    document.getElementById("emulationInfo").value = data.all_info;
                    lastRunInfo = data.info_obj;
                    document.getElementById("downloadButton").disabled = false;
                });
            });
        }

        function getSource() {
            var source_code = ""; 
            require(['rocher_editor_container'], function (editor) {
                source_code = editor.getValue();
            });
            return source_code;
        }

        function getLastRunInfo() {
            return JSON.stringify(lastRunInfo);
        }

        function download_file(name, contents, mime_type) {
            mime_type = mime_type || "text/plain";

            var blob = new Blob([contents], {type: mime_type});

            var dlink = document.createElement('a');
            dlink.download = name;
            dlink.href = window.URL.createObjectURL(blob);
            dlink.onclick = function(e) {
                // revokeObjectURL needs a delay to work properly
                var that = this;
                setTimeout(function() {
                    window.URL.revokeObjectURL(that.href);
                }, 1500);
            };
            dlink.click();
            dlink.remove();
        }
    </script>
</body>
</html>
